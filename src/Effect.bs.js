// Generated by BUCKLESCRIPT VERSION 5.0.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Pervasives$EffectMiddleware = require("./Pervasives.bs.js");

function taskFromPromise(promise, mapError) {
  return promise.then((function (param) {
                  return Pervasives$EffectMiddleware.$great$great(Pervasives$EffectMiddleware.ok, (function (prim) {
                                return Promise.resolve(prim);
                              }), param);
                })).catch((function (param) {
                return Pervasives$EffectMiddleware.$great$great((function (param) {
                              return Pervasives$EffectMiddleware.$great$great(mapError, Pervasives$EffectMiddleware.error, param);
                            }), (function (prim) {
                              return Promise.resolve(prim);
                            }), param);
              }));
}

function sleep(ms) {
  return taskFromPromise(new Promise((function (resolve, param) {
                    setTimeout((function (param) {
                            return resolve(Pervasives$EffectMiddleware.unit);
                          }), ms);
                    return /* () */0;
                  })), (function (param) {
                return Pervasives$EffectMiddleware.$$const(/* Trusted */0, param);
              }));
}

function perform(actionCreator, task) {
  return /* Effect */[task.then((function (param) {
                  return Pervasives$EffectMiddleware.$great$great((function (param) {
                                return Pervasives$EffectMiddleware.$great$great(Belt_Result.getExn, actionCreator, param);
                              }), (function (prim) {
                                return Promise.resolve(prim);
                              }), param);
                }))];
}

function attempt(actionCreator, task) {
  return /* Effect */[task.then((function (param) {
                  return Pervasives$EffectMiddleware.$great$great(actionCreator, (function (prim) {
                                return Promise.resolve(prim);
                              }), param);
                }))];
}

function apply(effects, dispatch, action) {
  var match = Curry._1(effects, action);
  if (match) {
    match[0].then((function (param) {
            return Pervasives$EffectMiddleware.$great$great(dispatch, (function (prim) {
                          return Promise.resolve(prim);
                        }), param);
          }));
  }
  return Curry._1(dispatch, action);
}

var Result = 0;

var none = /* None */0;

exports.Result = Result;
exports.taskFromPromise = taskFromPromise;
exports.sleep = sleep;
exports.none = none;
exports.perform = perform;
exports.attempt = attempt;
exports.apply = apply;
/* No side effect */
